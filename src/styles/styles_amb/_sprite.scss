// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$mastersystem-name: 'mastersystem';
$mastersystem-x: 0px;
$mastersystem-y: 0px;
$mastersystem-offset-x: 0px;
$mastersystem-offset-y: 0px;
$mastersystem-width: 120px;
$mastersystem-height: 93px;
$mastersystem-total-width: 220px;
$mastersystem-total-height: 168px;
$mastersystem-image: 'img/sprite.png';
$mastersystem: (0px, 0px, 0px, 0px, 120px, 93px, 220px, 168px, 'img/sprite.png', 'mastersystem', );
$megadrive-name: 'megadrive';
$megadrive-x: 0px;
$megadrive-y: 93px;
$megadrive-offset-x: 0px;
$megadrive-offset-y: -93px;
$megadrive-width: 108px;
$megadrive-height: 75px;
$megadrive-total-width: 220px;
$megadrive-total-height: 168px;
$megadrive-image: 'img/sprite.png';
$megadrive: (0px, 93px, 0px, -93px, 108px, 75px, 220px, 168px, 'img/sprite.png', 'megadrive', );
$supernintendo-name: 'supernintendo';
$supernintendo-x: 120px;
$supernintendo-y: 0px;
$supernintendo-offset-x: -120px;
$supernintendo-offset-y: 0px;
$supernintendo-width: 100px;
$supernintendo-height: 83px;
$supernintendo-total-width: 220px;
$supernintendo-total-height: 168px;
$supernintendo-image: 'img/sprite.png';
$supernintendo: (120px, 0px, -120px, 0px, 100px, 83px, 220px, 168px, 'img/sprite.png', 'supernintendo', );
$spritesheet-width: 220px;
$spritesheet-height: 168px;
$spritesheet-image: 'img/sprite.png';
$spritesheet-sprites: ($mastersystem, $megadrive, $supernintendo, );
$spritesheet: (220px, 168px, 'img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
